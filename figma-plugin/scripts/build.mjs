import { build, context } from 'esbuild';
import { mkdir, readFile, writeFile } from 'fs/promises';
import { resolve } from 'path';
import process from 'process';

const root = resolve(new URL('../', import.meta.url).pathname);
const outDir = resolve(root, 'dist');
const isWatch = process.argv.includes('--watch');

async function bundle() {
  await mkdir(outDir, { recursive: true });
  const buildOptions = {
    entryPoints: [resolve(root, 'src/main.ts')],
    bundle: true,
    outfile: resolve(outDir, 'main.js'),
    format: 'esm',
    target: 'es2018',
    platform: 'browser',
    sourcemap: false,
    banner: {
      js: '// Generated by esbuild. Do not edit.\n'
    }
  };

  if (isWatch) {
    const ctx = await context(buildOptions);
    await ctx.watch();
    console.log('Watching for changes...');
  } else {
    await build(buildOptions);
  }

  const manifestSrc = resolve(root, 'manifest.json');
  const manifestDst = resolve(outDir, 'manifest.json');
  const manifestContents = await readFile(manifestSrc, 'utf-8');
  await writeFile(manifestDst, manifestContents, 'utf-8');
}

bundle().catch((error) => {
  console.error(error);
  process.exitCode = 1;
});
