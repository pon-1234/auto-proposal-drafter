// Generated by esbuild. Do not edit.

var __freeze = Object.freeze;
var __defProp = Object.defineProperty;
var __template = (cooked, raw) => __freeze(__defProp(cooked, "raw", { value: __freeze(raw || cooked.slice()) }));

// src/main.ts
var _a;
var UI_HTML = String.raw(_a || (_a = __template([`
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <title>Wire JSON Loader</title>
    <style>
      :root {
        color-scheme: light dark;
        font-family: Inter, -apple-system, BlinkMacSystemFont, "Segoe UI", sans-serif;
      }
      body {
        margin: 0;
        padding: 16px;
        display: flex;
        flex-direction: column;
        gap: 12px;
      }
      h1 {
        font-size: 14px;
        margin: 0;
      }
      label {
        font-size: 11px;
        font-weight: 600;
      }
      input[type="url"], textarea {
        width: 100%;
        box-sizing: border-box;
        border-radius: 6px;
        border: 1px solid rgba(0,0,0,0.15);
        padding: 8px;
        font-size: 11px;
        background: var(--input-bg, white);
      }
      button {
        font-size: 11px;
        padding: 6px 12px;
        border-radius: 6px;
        border: none;
        cursor: pointer;
      }
      button.primary {
        background: #2563eb;
        color: white;
      }
      button.secondary {
        background: rgba(0,0,0,0.08);
        color: inherit;
      }
      button.danger {
        background: #dc2626;
        color: white;
      }
      .row {
        display: flex;
        gap: 8px;
      }
      .row button {
        flex: 1;
      }
      ul {
        margin: 0;
        padding-left: 16px;
        font-size: 11px;
        max-height: 120px;
        overflow-y: auto;
      }
      #status {
        font-size: 11px;
        min-height: 16px;
      }
      #warnings {
        color: #b45309;
      }
    </style>
  </head>
  <body>
    <h1>Wire JSON \u30A4\u30F3\u30DD\u30FC\u30C8</h1>
    <section>
      <label for="json-url">\u7F72\u540D\u4ED8\u304DURL</label>
      <input id="json-url" type="url" placeholder="https://.../wire.json" />
    </section>
    <div class="row">
      <button class="primary" id="load-url">URL \u3092\u53D6\u5F97</button>
      <button class="secondary" id="clear-url">\u30AF\u30EA\u30A2</button>
    </div>
    <section>
      <label for="file-input">\u30ED\u30FC\u30AB\u30EBJSON\u3092\u30A2\u30C3\u30D7\u30ED\u30FC\u30C9</label>
      <input id="file-input" type="file" accept="application/json" />
    </section>
    <div class="row">
      <button class="secondary" id="replay">\u6700\u5F8C\u306EURL\u3067\u518D\u5B9F\u884C</button>
      <button class="danger" id="close">\u9589\u3058\u308B</button>
    </div>
    <div id="status"></div>
    <section>
      <label>\u8B66\u544A</label>
      <ul id="warnings"></ul>
    </section>
    <script>
      const statusEl = document.getElementById('status');
      const urlInput = document.getElementById('json-url');
      const warningsEl = document.getElementById('warnings');
      const fileInput = document.getElementById('file-input');

      function postMessage(type, payload) {
        parent.postMessage({ pluginMessage: { type, ...payload } }, '*');
      }

      document.getElementById('load-url').addEventListener('click', () => {
        const url = urlInput.value.trim();
        if (!url) {
          statusEl.textContent = 'URL \u3092\u5165\u529B\u3057\u3066\u304F\u3060\u3055\u3044\u3002';
          return;
        }
        statusEl.textContent = '\u8AAD\u307F\u8FBC\u307F\u4E2D...';
        warningsEl.innerHTML = '';
        postMessage('load-url', { url });
      });

      document.getElementById('clear-url').addEventListener('click', () => {
        urlInput.value = '';
        statusEl.textContent = 'URL \u3092\u30AF\u30EA\u30A2\u3057\u307E\u3057\u305F\u3002';
        warningsEl.innerHTML = '';
        fileInput.value = '';
        postMessage('clear-url', {});
      });

      document.getElementById('replay').addEventListener('click', () => {
        postMessage('replay-last', {});
      });

      document.getElementById('close').addEventListener('click', () => {
        postMessage('close', {});
      });

      fileInput.addEventListener('change', async (event) => {
        const file = event.target.files && event.target.files[0];
        if (!file) return;
        statusEl.textContent = '\u30D5\u30A1\u30A4\u30EB\u3092\u8AAD\u307F\u8FBC\u307F\u4E2D...';
        warningsEl.innerHTML = '';
        try {
          const text = await file.text();
          postMessage('load-inline-json', { json: text, filename: file.name });
        } catch (err) {
          statusEl.textContent = '\u30D5\u30A1\u30A4\u30EB\u8AAD\u307F\u8FBC\u307F\u3067\u30A8\u30E9\u30FC\u304C\u767A\u751F\u3057\u307E\u3057\u305F\u3002';
        }
      });

      onmessage = (event) => {
        const msg = event.data.pluginMessage;
        if (!msg) return;
        if (msg.type === 'init') {
          if (msg.lastUrl) {
            urlInput.value = msg.lastUrl;
            statusEl.textContent = '\u6700\u5F8C\u306B\u4F7F\u7528\u3057\u305FURL\u3092\u8AAD\u307F\u8FBC\u307F\u6E08\u307F\u3002';
          }
        }
        if (msg.type === 'status') {
          statusEl.textContent = msg.message || '';
        }
        if (msg.type === 'warnings') {
          warningsEl.innerHTML = '';
          for (const warning of msg.items || []) {
            const li = document.createElement('li');
            li.textContent = warning;
            warningsEl.appendChild(li);
          }
        }
        if (msg.type === 'complete') {
          statusEl.textContent = '\u30EF\u30A4\u30E4\u30FC\u30D5\u30EC\u30FC\u30E0\u3092\u751F\u6210\u3057\u307E\u3057\u305F\u3002';
          if (msg.warnings && msg.warnings.length === 0) {
            const li = document.createElement('li');
            li.textContent = '\u8B66\u544A\u306F\u3042\u308A\u307E\u305B\u3093\u3002';
            warningsEl.appendChild(li);
          }
        }
        if (msg.type === 'error') {
          statusEl.textContent = msg.message || '\u30A8\u30E9\u30FC\u304C\u767A\u751F\u3057\u307E\u3057\u305F\u3002';
        }
      };
    <\/script>
  </body>
</html>
`])));
var FRAME_PRESETS = {
  Desktop: {
    name: "Desktop",
    width: 1440,
    baseHeight: 1024,
    padding: { top: 96, bottom: 120, horizontal: 160 },
    sectionSpacing: 40,
    layoutGrid: {
      pattern: "COLUMNS",
      alignment: "STRETCH",
      gutterSize: 32,
      count: 12,
      sectionSize: 72,
      offset: 0,
      visible: true,
      color: { r: 0.85, g: 0.85, b: 0.85 }
    }
  },
  Tablet: {
    name: "Tablet",
    width: 1024,
    baseHeight: 1200,
    padding: { top: 80, bottom: 100, horizontal: 96 },
    sectionSpacing: 32,
    layoutGrid: {
      pattern: "COLUMNS",
      alignment: "STRETCH",
      gutterSize: 24,
      count: 8,
      sectionSize: 72,
      offset: 0,
      visible: true,
      color: { r: 0.85, g: 0.85, b: 0.85 }
    }
  },
  Mobile: {
    name: "Mobile",
    width: 390,
    baseHeight: 1600,
    padding: { top: 64, bottom: 96, horizontal: 24 },
    sectionSpacing: 24,
    layoutGrid: {
      pattern: "COLUMNS",
      alignment: "STRETCH",
      gutterSize: 16,
      count: 4,
      sectionSize: 60,
      offset: 0,
      visible: true,
      color: { r: 0.85, g: 0.85, b: 0.85 }
    }
  }
};
var DEFAULT_FRAME_ORDER = ["Desktop", "Tablet", "Mobile"];
figma.showUI(UI_HTML, { width: 360, height: 480 });
void (async () => {
  const lastUrl = await figma.clientStorage.getAsync("wireDraft:lastUrl");
  figma.ui.postMessage({ type: "init", lastUrl });
})();
figma.root.setRelaunchData({ "regenerate-wire": "Regenerate wireframe from JSON" });
figma.ui.onmessage = async (msg) => {
  var _a2, _b, _c;
  switch (msg.type) {
    case "load-url":
      await handleUrlRequest(String((_a2 = msg.url) != null ? _a2 : ""));
      break;
    case "load-inline-json":
      await handleInlineJson(String((_b = msg.json) != null ? _b : ""), String((_c = msg.filename) != null ? _c : "local.json"));
      break;
    case "replay-last":
      await replayLastUrl();
      break;
    case "clear-url":
      await figma.clientStorage.setAsync("wireDraft:lastUrl", "");
      break;
    case "close":
      figma.closePlugin("\u30D7\u30E9\u30B0\u30A4\u30F3\u3092\u7D42\u4E86\u3057\u307E\u3057\u305F\u3002");
      break;
    default:
      console.warn("Unknown message from UI", msg);
  }
};
async function handleUrlRequest(url) {
  if (!url) {
    pushStatus("URL \u304C\u6307\u5B9A\u3055\u308C\u3066\u3044\u307E\u305B\u3093\u3002");
    return;
  }
  pushStatus("Wire JSON \u3092\u53D6\u5F97\u3057\u3066\u3044\u307E\u3059...");
  try {
    const response = await fetch(url);
    if (!response.ok) {
      throw new Error(`HTTP ${response.status} ${response.statusText}`);
    }
    const text = await response.text();
    await figma.clientStorage.setAsync("wireDraft:lastUrl", url);
    await processWireJson(text, { source: "url", identifier: url });
  } catch (error) {
    const message = error instanceof Error ? error.message : String(error);
    pushError(`\u53D6\u5F97\u306B\u5931\u6557\u3057\u307E\u3057\u305F: ${message}`);
  }
}
async function handleInlineJson(json, filename) {
  if (!json.trim()) {
    pushStatus("JSON \u306E\u5185\u5BB9\u304C\u7A7A\u3067\u3059\u3002");
    return;
  }
  pushStatus(`${filename} \u3092\u89E3\u6790\u4E2D...`);
  try {
    await processWireJson(json, { source: "file", identifier: filename });
  } catch (error) {
    const message = error instanceof Error ? error.message : String(error);
    pushError(`\u89E3\u6790\u306B\u5931\u6557\u3057\u307E\u3057\u305F: ${message}`);
  }
}
async function replayLastUrl() {
  const lastUrl = await figma.clientStorage.getAsync("wireDraft:lastUrl");
  if (!lastUrl) {
    pushStatus("\u524D\u56DE\u306EURL\u304C\u898B\u3064\u304B\u308A\u307E\u305B\u3093\u3002");
    return;
  }
  await handleUrlRequest(lastUrl);
}
async function processWireJson(json, meta) {
  try {
    const data = JSON.parse(json);
    validateWireDraft(data);
    pushStatus("\u30EF\u30A4\u30E4\u30FC\u30D5\u30EC\u30FC\u30E0\u3092\u751F\u6210\u4E2D...");
    const result = await generateWireframes(data);
    pushStatus(`\u751F\u6210\u304C\u5B8C\u4E86\u3057\u307E\u3057\u305F (${meta.source === "url" ? meta.identifier : "\u30ED\u30FC\u30AB\u30EB\u30D5\u30A1\u30A4\u30EB"})`);
    figma.ui.postMessage({ type: "complete", warnings: result.warnings, frames: result.frames });
    if (result.warnings.length) {
      pushWarnings(result.warnings);
      figma.notify(`\u8B66\u544A\u3042\u308A: ${result.warnings.length}\u4EF6`, { timeout: 4e3 });
    } else {
      figma.notify("Wire JSON \u304B\u3089\u751F\u6210\u304C\u5B8C\u4E86\u3057\u307E\u3057\u305F\u3002");
    }
  } catch (error) {
    const message = error instanceof Error ? error.message : String(error);
    pushError(message);
  }
}
function validateWireDraft(data) {
  if (!data || typeof data !== "object") {
    throw new Error("Wire JSON \u304C\u4E0D\u6B63\u3067\u3059\u3002");
  }
  if (!data.project || !data.project.id) {
    throw new Error("project.id \u304C\u898B\u3064\u304B\u308A\u307E\u305B\u3093\u3002");
  }
  if (!Array.isArray(data.pages) || data.pages.length === 0) {
    throw new Error("pages \u304C\u7A7A\u3067\u3059\u3002");
  }
}
async function generateWireframes(data) {
  var _a2;
  const warnings = [];
  const frames = [];
  const frameOrder = (Array.isArray(data.frames) && data.frames.length ? data.frames : DEFAULT_FRAME_ORDER).map(
    (name) => FRAME_PRESETS[name] ? name : "Desktop"
  );
  const createdPages = [];
  for (const pageSpec of data.pages) {
    const page = figma.createPage();
    page.name = `${data.project.title} / ${pageSpec.page_id}`;
    createdPages.push(page);
    let cursorX = 0;
    const spacing = 160;
    for (const frameKey of frameOrder) {
      const preset = (_a2 = FRAME_PRESETS[frameKey]) != null ? _a2 : FRAME_PRESETS.Desktop;
      const frame = figma.createFrame();
      frame.name = `${pageSpec.page_id} | ${preset.name}`;
      configureFrame(frame, preset);
      frame.x = cursorX;
      frame.y = 0;
      cursorX += preset.width + spacing;
      page.appendChild(frame);
      frames.push(`${page.name} - ${frame.name}`);
      await populateSections(frame, pageSpec, warnings);
      if (pageSpec.notes && pageSpec.notes.length) {
        await insertNotes(frame, pageSpec.notes);
      }
      frame.setRelaunchData({ "regenerate-wire": "Regenerate this frame from Wire JSON" });
    }
  }
  if (createdPages.length) {
    figma.currentPage = createdPages[0];
  }
  return { warnings, frames };
}
function configureFrame(frame, preset) {
  frame.resizeWithoutConstraints(preset.width, preset.baseHeight);
  frame.layoutMode = "VERTICAL";
  frame.primaryAxisSizingMode = "AUTO";
  frame.counterAxisSizingMode = "FIXED";
  frame.counterAxisAlignItems = "CENTER";
  frame.itemSpacing = preset.sectionSpacing;
  frame.paddingTop = preset.padding.top;
  frame.paddingBottom = preset.padding.bottom;
  frame.paddingLeft = preset.padding.horizontal;
  frame.paddingRight = preset.padding.horizontal;
  frame.fills = [{ type: "SOLID", color: { r: 1, g: 1, b: 1 } }];
  frame.strokes = [];
  frame.effects = [];
  frame.clipsContent = false;
  if (preset.layoutGrid) {
    frame.layoutGrids = [preset.layoutGrid];
  } else {
    frame.layoutGrids = [];
  }
}
async function populateSections(frame, page, warnings) {
  for (const section of page.sections) {
    const instance = await createSectionInstance(section, warnings, page.page_id);
    frame.appendChild(instance);
    instance.layoutAlign = "STRETCH";
    if (instance.type === "FRAME" || instance.type === "INSTANCE") {
      if ("counterAxisSizingMode" in instance && instance.layoutMode === "VERTICAL") {
        instance.counterAxisSizingMode = "AUTO";
        instance.primaryAxisSizingMode = "AUTO";
      }
    }
    if (section.placeholders && Object.keys(section.placeholders).length) {
      await applyPlaceholders(instance, section.placeholders, warnings, page.page_id);
    }
  }
}
async function createSectionInstance(section, warnings, pageId) {
  const componentName = `Section/${section.kind}/${section.variant}`;
  const component = findComponentByName(componentName);
  if (component) {
    const instance = component.createInstance();
    instance.name = componentName;
    return instance;
  }
  warnings.push(
    `[${pageId}] \u30B3\u30F3\u30DD\u30FC\u30CD\u30F3\u30C8 '${componentName}' \u304C\u898B\u3064\u304B\u3089\u306A\u304B\u3063\u305F\u305F\u3081\u30D7\u30EC\u30FC\u30B9\u30DB\u30EB\u30C0\u30FC\u3092\u914D\u7F6E\u3057\u307E\u3057\u305F\u3002`
  );
  return buildPlaceholderSection(section);
}
function findComponentByName(name) {
  const node = figma.root.findOne((n) => n.type === "COMPONENT" && n.name === name);
  return node != null ? node : null;
}
function buildPlaceholderSection(section) {
  const frame = figma.createFrame();
  frame.name = `Placeholder ${section.kind}/${section.variant}`;
  frame.layoutMode = "VERTICAL";
  frame.primaryAxisSizingMode = "AUTO";
  frame.counterAxisSizingMode = "AUTO";
  frame.itemSpacing = 8;
  frame.paddingTop = 24;
  frame.paddingBottom = 24;
  frame.paddingLeft = 24;
  frame.paddingRight = 24;
  frame.strokes = [{ type: "SOLID", color: { r: 0.87, g: 0.44, b: 0.2 } }];
  frame.dashPattern = [4, 4];
  frame.fills = [{ type: "SOLID", color: { r: 1, g: 0.97, b: 0.92 }, opacity: 0.6 }];
  const title = figma.createText();
  title.name = "placeholder-heading";
  void setText(title, `${section.kind}/${section.variant} \u672A\u5BFE\u5FDC`);
  const body = figma.createText();
  body.name = "placeholder-body";
  void setText(
    body,
    "UI Kit \u306B\u8A72\u5F53\u30B3\u30F3\u30DD\u30FC\u30CD\u30F3\u30C8\u304C\u5B58\u5728\u3057\u307E\u305B\u3093\u3002\n\u30B3\u30F3\u30DD\u30FC\u30CD\u30F3\u30C8\u3092\u8FFD\u52A0\u3059\u308B\u304B\u30DE\u30C3\u30D4\u30F3\u30B0\u3092\u66F4\u65B0\u3057\u3066\u304F\u3060\u3055\u3044\u3002"
  );
  frame.appendChild(title);
  frame.appendChild(body);
  return frame;
}
async function applyPlaceholders(node, placeholders, warnings, pageId) {
  const textNodes = findAllTextNodes(node);
  const mapped = /* @__PURE__ */ new Set();
  for (const [key, value] of Object.entries(placeholders)) {
    const target = findMatchingTextNode(textNodes, key);
    if (!target) {
      warnings.push(`[${pageId}] \u30D7\u30EC\u30FC\u30B9\u30DB\u30EB\u30C0\u30FC '${key}' \u306B\u5BFE\u5FDC\u3059\u308B\u30C6\u30AD\u30B9\u30C8\u30EC\u30A4\u30E4\u30FC\u304C\u898B\u3064\u304B\u308A\u307E\u305B\u3093\u3067\u3057\u305F\u3002`);
      continue;
    }
    await setText(target, value);
    mapped.add(target);
  }
  if (textNodes.length && mapped.size === 0) {
    warnings.push(`[${pageId}] \u30D7\u30EC\u30FC\u30B9\u30DB\u30EB\u30C0\u30FC\u3092\u633F\u5165\u3067\u304D\u307E\u305B\u3093\u3067\u3057\u305F\u3002\u30EC\u30A4\u30E4\u30FC\u540D\u3092\u78BA\u8A8D\u3057\u3066\u304F\u3060\u3055\u3044\u3002`);
  }
}
function findAllTextNodes(root) {
  if ("findAll" in root) {
    return root.findAll((n) => n.type === "TEXT");
  }
  return [];
}
function findMatchingTextNode(nodes, key) {
  const normalizedKey = normalize(key);
  return nodes.find((node) => normalize(node.name) === normalizedKey);
}
function normalize(input) {
  return input.replace(/[^a-zA-Z0-9]/g, "").toLowerCase();
}
async function setText(node, value) {
  const fontName = node.fontName;
  if (fontName === figma.mixed) {
    const ranges = node.getRangeAllFontNames(0, node.characters.length || 1);
    for (const rangeFont of ranges) {
      await figma.loadFontAsync(rangeFont);
    }
  } else {
    await figma.loadFontAsync(fontName);
  }
  node.characters = value;
}
async function insertNotes(frame, notes) {
  const noteFrame = figma.createFrame();
  noteFrame.name = "Notes";
  noteFrame.layoutMode = "VERTICAL";
  noteFrame.primaryAxisSizingMode = "AUTO";
  noteFrame.counterAxisSizingMode = "AUTO";
  noteFrame.itemSpacing = 4;
  noteFrame.paddingLeft = 0;
  noteFrame.paddingRight = 0;
  noteFrame.paddingTop = 16;
  noteFrame.paddingBottom = 0;
  noteFrame.fills = [];
  noteFrame.strokes = [];
  noteFrame.layoutAlign = "STRETCH";
  const heading = figma.createText();
  heading.name = "NoteHeading";
  await setText(heading, "Notes");
  heading.fontSize = 14;
  const body = figma.createText();
  body.name = "NoteBody";
  await setText(body, notes.map((n, idx) => `${idx + 1}. ${n}`).join("\n"));
  body.fontSize = 11;
  noteFrame.appendChild(heading);
  noteFrame.appendChild(body);
  frame.appendChild(noteFrame);
}
function pushStatus(message) {
  figma.ui.postMessage({ type: "status", message });
}
function pushWarnings(items) {
  figma.ui.postMessage({ type: "warnings", items });
}
function pushError(message) {
  figma.ui.postMessage({ type: "error", message });
  figma.notify(`\u30A8\u30E9\u30FC: ${message}`, { error: true });
}
